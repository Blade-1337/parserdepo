import asyncio
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "Bot Token"
MODELS_FILE = "models.json"
PERSONS_FILE = "persons.json"
DATA_FOLDER = "data"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–æ–≤

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
def load_json(filename, default_value):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. """
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return default_value

def save_json(filename, data):
    """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª. """
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
model_names = load_json(MODELS_FILE, ["Kira", "Stacey", "Ayrin"])
persons = load_json(PERSONS_FILE, {})

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å model_name ---
def get_model_keyboard():
    """ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ model_name. """
    buttons = [KeyboardButton(text=name) for name in model_names]
    keyboard = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)
    return keyboard

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_model_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ model_name ---
@dp.message()
async def message_handler(message: Message):
    user_id = str(message.from_user.id)
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å model_name
    if text in model_names:
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {text}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        dp["selected_model"] = text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω model_name
    model_name = dp.get("selected_model")
    if not model_name:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    parts = text.split("  ")  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –¥–≤–æ–π–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É
    if len(parts) < 5:
        await message.answer("–û—à–∏–±–∫–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.")
        return

    date, total_amount, fee, net_amount, description = parts[0], parts[1], parts[2], parts[3], parts[4]

    # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã $
    total_amount = total_amount.replace("$", "").strip()
    fee = fee.replace("$", "").strip()
    net_amount = net_amount.replace("$", "").strip()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ persons.json
    person_name = persons.get(user_id, user_id)

    # –°–æ–∑–¥–∞–µ–º JSON
    data = {
        "model_name": model_name,
        "date": date,
        "total_amount": total_amount,
        "fee": fee,
        "net_amount": net_amount,
        "description": description,
        "person": person_name
    }

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(DATA_FOLDER):
        os.makedirs(DATA_FOLDER)

    # –ò–º—è —Ñ–∞–π–ª–∞ = model_name.json
    file_path = os.path.join(DATA_FOLDER, f"{model_name}.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            old_data = json.load(f)
            if isinstance(old_data, list):
                old_data.append(data)
            else:
                old_data = [old_data, data]
    else:
        old_data = [data]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    save_json(file_path, old_data)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª `{model_name}.json`")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
